TODO:
	- transfer classes and methods
	- transfer pipeline
	- get a window working

#SCENE RENDERING PIPELINE - TRIANGLE BY TRIANGLE
		for obj in scene.objectCollection:
			for tri in obj.triTable:
				v0 = obj.wldSpaceVertexTable[int(tri[0])].copy()
				v1 = obj.wldSpaceVertexTable[int(tri[1])].copy()
				v2 = obj.wldSpaceVertexTable[int(tri[2])].copy()

				normalVector = cross((v0-v1),(v1-v2)) / linalg.norm(cross((v0-v1),(v1-v2))) # calculates normal vector from normalized cross product
				averagePosition = array([(v0[0]+v1[0]+v2[0])/3,(v0[1]+v1[1]+v2[1])/3,(v0[2]+v1[2]+v2[2])/3]) # mean position of all points in triangle
				cameraToTriangleVector = averagePosition - cam.pos
				
				if scene.backfaceCulling and (dot(normalVector, cameraToTriangleVector) >= 0):
					continue # skip over any triangles that are not facing the camera
				
				cameraSpaceV0 = cameraSpace(v0, cam)
				cameraSpaceV1 = cameraSpace(v1, cam)
				cameraSpaceV2 = cameraSpace(v2, cam)

				clipSpaceV0 = clipSpace(cameraSpaceV0, cam, screen)
				clipSpaceV1 = clipSpace(cameraSpaceV1, cam, screen)
				clipSpaceV2 = clipSpace(cameraSpaceV2, cam, screen)

				if not (isInClipSpace(clipSpaceV0) and isInClipSpace(clipSpaceV1) and isInClipSpace(clipSpaceV2)):
					continue
					

				imageSpaceV0 = imageSpace(clipSpaceV0, cam)
				imageSpaceV1 = imageSpace(clipSpaceV1, cam)
				imageSpaceV2 = imageSpace(clipSpaceV2, cam)

				screenSpaceV0 = screenSpace(imageSpaceV0, screen)
				screenSpaceV1 = screenSpace(imageSpaceV1, screen)
				screenSpaceV2 = screenSpace(imageSpaceV2, screen)

				screen.drawLine(screenSpaceV0, screenSpaceV1, white)
				screen.drawLine(screenSpaceV1, screenSpaceV2, white)
				screen.drawLine(screenSpaceV2, screenSpaceV0, white)
				#screen.drawTriangle(screenSpaceV0, screenSpaceV1, screenSpaceV2, white)